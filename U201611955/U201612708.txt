# 于启辰对汪泽旸demo的code review
## 一、有关命名
```c++

void main(void)
{
	int q, w, e;
	cout << "请输入您的出生日期" << endl;
	cin >> q >> w >> e;
	Date j(q, w, e);
	j.runian();
	cout << "这天是该年第" << j.date() << "天" << endl;
	
}
``` 
### 1. 这里直接用q,w,e让用户输入年月日，虽然不影响输入输出，但是时间一久很容易忘记当时设置的变量分别是什么，如果要扩展，代码量增加，更加难以找到原来的命名是什么，建议改成 birth_year,birth_month,birth_day.
### 2. 这里用 j 来代表输入生日，虽然这里只用到了这一个日期，但是如果要在此代码上发展，很容易最后搞不清 j 的意义。
### 3. 此外，在Date类的成员变量中设置flag来表现某日期是否是闰年的特性，最好还是用类似"runnian""IsRunnian"之类的变量来表征比较有代表性，方便审阅检查。
## 二、有关注释
  原代码没有对代码做相应注释，建议在每个定义后和每次使用函数后在旁边进行注释，方便以后进行审查。
## 三、没有考虑异常

  代码只能接收用户输入年/月/日，如果输入不符合规范的情况，很容易造成造成运行报错，应当对异常情况进行改进。比如告知输入规范，或者设置循环，判断格式正确后才能继续运行。
## 四、有关结构及算法
### 1. 判断是否是闰年的函数
```c++
public:
	Date(int a, int b, int c) { year = a; month = b; day = c; }
	void runian() 
	{
		if (year % 4 == 0 && year % 100 != 0)
		{
			cout << "是闰年" << endl;
			flag = 1;
		}
		else if (year % 400 == 0)
		{
			cout << "是闰年" << endl;
			flag = 1;
		}
		else
		{
			cout << "不是闰年" << endl;
			flag = 0;
		}
	}
```
  这里把runian函数放在Date类里面，而且具体的定义也写在Date类的大括号里，使类显得很臃肿。虽然可以利用定义的Date j求出是否是闰年，并把此特征存储在这个类里。但是既然反正是函数，存储在Date类中，这个函数就只能判断某个年/月/日是否是闰年，而无法单独判断某一年是否是闰年，因此我建议专门写一个公有函数"runnian"如下：
```c++
int runnian(int year)
{
	if (year % 4 == 0 && year % 100 != 0)
	{
		return 1;
	}
	else if (year % 400 == 0)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}
```
返回值为1时代表该年是闰年，返回值为0则代表该年不是闰年。  
### 2. 关于星座的输出
  原程序把星座的输出写在了主函数里，鉴于此程序本来的主要目的即是查询星座，也是可以理解的。不过，要是想将程序扩展，主函数尽量还是要简洁，我建议把再Date 类中专门写一个星座输出函数，这样可以让主函数更加简单明了。如下是改完的全部函数：
  ```c++
  #include "stdafx.h"
#include <windows.h> 
#include <stdio.h>
#include<iostream>
using namespace std;
class Date
{
	int day;
	int month;
	int year;
	int flag;

public:
	Date(int a, int b, int c) { year = a; month = b; day = c; }
	void constellation();

	

	int date()
	{
		int a[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
		int i, x = 0;
		for (i = 0; i<month - 1; i++)
			x += a[i];
		x = x + day;
		if (month>2)
			if (flag)
				x++;
		return x;
	}

};
void Date:: constellation()
{
	if (month == 1 && day >= 20)
		cout << "这天是水瓶座" << endl;
	else if (month == 2 && day <= 18)
		cout << "这天是水瓶座" << endl;
	else if (month == 2 && day > 18)
		cout << "这天是双鱼座" << endl;
	else if (month == 3 && day <= 20)
		cout << "这天是双鱼座" << endl;
	else if (month == 3 && day > 20)
		cout << "这天是白羊座" << endl;
	else if (month == 4 && day <= 19)
		cout << "这天是白羊座" << endl;
	else if (month == 4 && day >= 20)
		cout << "这天是金牛座" << endl;
	else if (month == 5 && day <= 20)
		cout << "这天是金牛座" << endl;
	else if (month == 5 && day >= 21)
		cout << "这天是双子座" << endl;
	else if (month == 6 && day <= 21)
		cout << "这天是双子座" << endl;
	else if (month == 6 && day >= 22)
		cout << "这天是巨蟹座" << endl;
	else if (month == 7 && day <= 22)
		cout << "这天是巨蟹座" << endl;
	else if (month == 7 && day >= 23)
		cout << "这天是狮子座" << endl;
	else if (month == 8 && day <= 22)
		cout << "这天是狮子座" << endl;
	else if (month == 8 && day >= 23)
		cout << "这天是处女座" << endl;
	else if (month == 9 && day <= 22)
		cout << "这天是处女座" << endl;
	else if (month == 9 && day >= 23)
		cout << "这天是天秤座" << endl;
	else if (month == 10 && day <= 23)
		cout << "这天是天秤座" << endl;
	else if (month == 10 && day >= 24)
		cout << "这天是天蝎座" << endl;
	else if (month == 11 && day <= 22)
		cout << "这天是天蝎座" << endl;
	else if (month == 11 && day >= 23)
		cout << "这天是射手座" << endl;
	else if (month == 12 && day <= 21)
		cout << "这天是射手座" << endl;
	else if (month == 12 && day >= 22)
		cout << "这天是摩羯座" << endl;
	else if (month == 1 && day <= 19)
		cout << "这天是摩羯座" << endl;
}


int runnian(int year)
{
	if (year % 4 == 0 && year % 100 != 0)
	{
		return 1;
	}
	else if (year % 400 == 0)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

void main(void)
{
	int birth_year, birth_month, birth_day;
	cout << "请输入您的出生日期" << endl;
	cin >> birth_year >> birth_month >> birth_day;
	Date birthdate(birth_year, birth_month, birth_day);
	if (runnian(birth_year) == 1)
		cout << "是闰年" << endl;
	else
		cout<< "不是闰年" << endl;
	cout << "这天是该年第" << birthdate.date() << "天" << endl;
	birthdate.constellation();

}
```
# 谢谢！
